{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91935\\\\OneDrive\\\\Desktop\\\\WEB DEVLOPMENT\\\\react\\\\E-commerce-website\\\\src\\\\components\\\\setAvatar.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Navigate, useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Setavatar = props => {\n  _s();\n  const [avatars, setAvatars] = useState([]);\n  const navigate = useNavigate();\n  const fetchAvatars = async () => {\n    try {\n      const avatarUrls = [];\n      for (let i = 0; i < 5; i++) {\n        const randomId = Math.floor(Math.random() * 1000);\n        const avatarUrl = `https://api.multiavatar.com/${randomId}.png?apikey=m8tEFp9JIXCSJA`;\n        avatarUrls.push(avatarUrl);\n      }\n      setAvatars(avatarUrls);\n    } catch (error) {\n      console.error('Error fetching avatars:', error);\n    }\n  };\n  const selecthandle = avatarUrl => {\n    props.setimage(avatarUrl);\n  };\n  useEffect(() => {\n    fetchAvatars();\n  }, []); // Run fetchAvatars only once on component mount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      style: {\n        height: \"30vh\",\n        width: \"78vh\",\n        paddingTop: \"20px\",\n        background: \"#162a61\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-column justify-content-center \",\n        children: avatars.length > 0 &&\n        /*#__PURE__*/\n        // Render only if avatars are fetched successfully\n        _jsxDEV(\"ul\", {\n          className: \"d-flex justify-content-center\",\n          children: avatars.map((avatarUrl, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              listStyleType: 'none',\n              display: 'inline-block'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: avatarUrl,\n              onClick: () => {\n                selecthandle(avatarUrl);\n              },\n              style: {\n                width: \"60px\",\n                margin: \"20px\",\n                borderRadius: \"50%\",\n                border: props.selectedimage === avatarUrl ? '4px solid blue' : null\n              },\n              alt: `Avatar ${index + 1}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 23\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(Setavatar, \"oE2HZzCFD+kbNoAvpSkvdtYzH6E=\", false, function () {\n  return [useNavigate];\n});\n_c = Setavatar;\nexport default Setavatar;\nvar _c;\n$RefreshReg$(_c, \"Setavatar\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","Setavatar","props","_s","avatars","setAvatars","navigate","fetchAvatars","avatarUrls","i","randomId","Math","floor","random","avatarUrl","push","error","console","selecthandle","setimage","children","className","style","height","width","paddingTop","background","length","map","index","listStyleType","display","src","onClick","margin","borderRadius","border","selectedimage","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/91935/OneDrive/Desktop/WEB DEVLOPMENT/react/E-commerce-website/src/components/setAvatar.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\n\r\nconst Setavatar = (props) => {\r\n      const [avatars, setAvatars] = useState([]);\r\n      const navigate= useNavigate();\r\n\r\n      const fetchAvatars = async () => {\r\n        try {\r\n          const avatarUrls = [];\r\n          for (let i = 0; i < 5; i++) {\r\n            const randomId = Math.floor(Math.random() * 1000);\r\n            const avatarUrl= `https://api.multiavatar.com/${randomId}.png?apikey=m8tEFp9JIXCSJA`;\r\n            avatarUrls.push(avatarUrl);\r\n          }\r\n          setAvatars(avatarUrls);\r\n        } \r\n        catch (error) {\r\n          console.error('Error fetching avatars:', error);\r\n        }\r\n      }\r\n\r\n    const selecthandle=(avatarUrl)=>{\r\n              props.setimage(avatarUrl);\r\n            \r\n    }\r\n  \r\n\r\n  useEffect(() => {\r\n  \r\n    fetchAvatars();\r\n  }, []); // Run fetchAvatars only once on component mount\r\n\r\n  return (\r\n    <>\r\n        <div className=\"\" style={{height:\"30vh\",width:\"78vh\",paddingTop:\"20px\",background:\"#162a61\"}}>\r\n\r\n          <div className=\"d-flex flex-column justify-content-center \">\r\n              {avatars.length > 0 && ( // Render only if avatars are fetched successfully\r\n                <ul className=\"d-flex justify-content-center\" >\r\n                  {avatars.map((avatarUrl, index) => (\r\n                    <li key={index} style={{listStyleType:'none',display:'inline-block'}}>\r\n                      <img src={avatarUrl}  onClick={()=>{selecthandle(avatarUrl)}}  style={{width:\"60px\",margin:\"20px\",borderRadius:\"50%\",border:props.selectedimage ===avatarUrl ?  '4px solid blue': null}}   alt={`Avatar ${index + 1}`} />\r\n                    </li>\r\n\r\n                  ))}\r\n                </ul>\r\n              )}\r\n\r\n          </div>\r\n        </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Setavatar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}